
import java.util.Base64;
public class TestTdesCrypto {

	public static void main(String[] args) {

		String  KEY = "OngCxmZXeqC0gifmgwZN18bcXdgUpnVP";
		String IV = "/O6W6X2cgAk=";
		 
		byte[] key = Base64.getDecoder().decode(KEY);
		byte[] iv = Base64.getDecoder().decode(IV);
		
		System.out.println("key usado: ");		
		for (int i = 0; i < key.length; i++) {
			System.out.print(" " + key[i]);
		}
		System.out.println();
		System.out.println("IV usado: ");
		for (int i = 0; i < iv.length; i++) {
			System.out.print(" " + iv[i]);
		}
		
		
		 System.out.println();
		 TdesCrypto prueba = new TdesCrypto(key, iv);
		
		 System.out.println();
		 
		 String cadena = "<DataPayment xmlns=\"http://tempuri.org/DataPayment.xsd\"> <DatosTarjeta> <NumeroTC>4111111111111111</NumeroTC> <MesVencimientoTC>02</MesVencimientoTC> <AnioVencimientoTC>2018</AnioVencimientoTC> <DigitoSeguridadTC>123</DigitoSeguridadTC> <Franquicia>1</Franquicia> <NumeroCuotas>01</NumeroCuotas> <SessionID>umj1af2utddltg45zgamswyu</SessionID> </DatosTarjeta> <DatosComprador> <Nombre>prueba</Nombre> <Apellido>prueba</Apellido> <NumeroDocumento>4567654</NumeroDocumento> <TipoDocumento>1</TipoDocumento> <Email>test@avianca.com</Email> <Telefono>1234567890</Telefono> <Direccion>Calle</Direccion> <Ciudad>Ciudad</Ciudad> <Estado>Estado</Estado> <ZipCode>029393</ZipCode> <Suite /> <Direccion2 /> <Pais>MX</Pais> </DatosComprador> <DatosCompra> <Descripcion>36CUZZ</Descripcion> <Fecha>18/11/2016 18:55:58</Fecha> <IsoMoneda>MXN</IsoMoneda> <Valor>6934</Valor> <ValorTotal>2574</ValorTotal> <ValorAdicional>154</ValorAdicional> <Iva>337</Iva> <BaseDevolucion>2102</BaseDevolucion> <Extra1>chrome</Extra1> <Extra2>es-CO</Extra2> <XmlFraude>&lt;?xml version=\"1.0\"?&gt;&lt;PNRData xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"&gt;  &lt;RecordLocator&gt;3538E5&lt;/RecordLocator&gt;  &lt;OficinaReserva_Id&gt;MEXAV08AK&lt;/OficinaReserva_Id&gt;  &lt;OficinaReserva_Pais&gt;MX&lt;/OficinaReserva_Pais&gt;  &lt;OficinaVenta_Id&gt;MEXAV08AK&lt;/OficinaVenta_Id&gt;  &lt;OficinaVenta_Pais&gt;MX&lt;/OficinaVenta_Pais&gt;  &lt;Pasajeros&gt;    &lt;Pasajero&gt;      &lt;Identificador&gt;0&lt;/Identificador&gt;      &lt;Pais /&gt;      &lt;Nivel /&gt;      &lt;Nombres&gt;Prueba&lt;/Nombres&gt;      &lt;Apellidos&gt;Prueba&lt;/Apellidos&gt;      &lt;TipoDocumento /&gt;      &lt;NumeroDocumento /&gt;      &lt;Email&gt;test@avianca.com&lt;/Email&gt;      &lt;TelOficina /&gt;      &lt;TelResidencia&gt;1234567890&lt;/TelResidencia&gt;      &lt;TelMovil /&gt;      &lt;DirPais /&gt;      &lt;DirCiudad /&gt;      &lt;DirCalle /&gt;    &lt;/Pasajero&gt;  &lt;/Pasajeros&gt;  &lt;Trayectos&gt;    &lt;Trayecto&gt;      &lt;FechaSalida&gt;2016-12-19T08:30:00&lt;/FechaSalida&gt;      &lt;FechaLlegada&gt;2016-12-19T12:10:00&lt;/FechaLlegada&gt;      &lt;Vuelo&gt;AV9788&lt;/Vuelo&gt;      &lt;Origen&gt;BOG&lt;/Origen&gt;      &lt;Destino&gt;MEX&lt;/Destino&gt;      &lt;Clase&gt;R&lt;/Clase&gt;      &lt;NummeroTrayecto&gt;0&lt;/NummeroTrayecto&gt;    &lt;/Trayecto&gt;  &lt;/Trayectos&gt;&lt;/PNRData&gt;</XmlFraude> </DatosCompra> <DatosHuella> <IpCliente>190.84.137.154</IpCliente> <FirmaDispositivo>lghfbw45prgivt55gkdwc2n0</FirmaDispositivo> <Navegador>Chrome</Navegador> <AgenteUsuario>Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.71 Safari/537.36</AgenteUsuario> </DatosHuella> <DatosTransaccion> <Referencia>36CUZZ</Referencia> <Pais>MX</Pais> <Ip>190.84.137.154</Ip> <Cookie>lghfbw45prgivt55gkdwc2n0</Cookie> <IdSesion>umj1af2utddltg45zgamswyu</IdSesion> <IdMedioPago>18</IdMedioPago> <IdTipoPago>1</IdTipoPago> </DatosTransaccion> <BeneficiarioCompra> <Nombre>Prueba</Nombre> <Apellido>Prueba</Apellido> <Telefono>1234567890</Telefono> <Email>test@avianca.com</Email> </BeneficiarioCompra> </DataPayment>";
		 System.out.println("cadena --> "+ cadena);
		 
		
//		System.out.println("Cadena encriptada --> "+ prueba.encrypt(cadena));
		
		 System.out.println("Cadena des-encriptada -- > "+ prueba.decrypt("1Q8WmuWxypqF5DlENPdbTxQphkF+HZFrmtsox74NHLqp6PI/ShjAG7AJsCe1mVIEow/I94GOUJ8FXd33f84IzHaolmmX29XbW3tUGJXNtnlNbD5+l5uojx8ifD1JHioqdjd8psi98WPPNTvp5YIxJ/EkrTgsVeEWBfjef7PgMX4benw9bD+2FoIdMd6to4Sxrjvj2I9iZbLT1mjYqIKJb+eHGS7baKMpasEySrD0imZmBxUOEANDIVzUGWg4l2bcMZCkhXrOxc3L+9jd2CeeoCUuYLW9E7bKMGOQJA+QkIdo/1gwKt7JiD7XB2+cl2u8jvabmLZCjy3vdUs/RUUf4vNJfIpIYvKqL5nmKRXMyAqvrWw4Wf+dadx/f9LtO7k/X8bclMRiCXM2ckTzTCOSo8LBR+NqZBDU74zZ2WyKSjoRhJzNWZxq3fZ9reQYwq8SqyWzWIMCuAX1E1TLscyd53c1Imou2hywbySRAaVlYD79PmqoAIsyLJp/MUxgy35hWe1I5dGSJ3414N58W7v68dPH8UiaFeSbYh1L6hQbJVb646abk7J9zvDy1Sb5AdR1U4+stFYH7gJyl8dfcAF5v9BEgwdZEJenlMQnCmgEz4vki1dH3f1rXk+KNze0tGeEC4gAJbeDGu23vHU+N4MG5gKlYmLWuUWjoMXj0lyvpwlTKE1C2Iqo9wQZ+wCIJiKAI13qqVDZU097MmkcUJolWqjIdhFWCj7bPRQLqK3sSMuO/WTuvDeSWs8zdqzHnPlE+izecGXRHvblqWgk8kUkQdnBi8uuO/H13AEH8gFzyjxpkxy1Er591Kdw3ZPOYWZIg6WOFCMYaSEJUfhCO+uCglCjh10BEJrTSiiBU+7V8CJcTOGz2qKu0lCPZBHk8jzOKIVElXWpRB1Zhbh38ivZ3S6Kus579f8lhfUuHw4z6x86DRl1Qc+FMBxZ7swdNp/9viTbq+Gx5R21wHereuqXiqHZwjuDinZ42NPi2Poy6xDt1J8Ir9glYzGjZSckcZ6pz3cytPF7dLn7cUOkLA9szC7aZOUj0wUHlE/TiNYFTmKE9k9xTxu85/vsuEIZi21+jUkSm2QMt68W4pr65n2NG9DPY5vUiDcTRxwD9oEpnn2a+abX4LXT/DdD9m/UfjcxXApB5MhrMqxVicolhBArAmMx5Ctl4l6qiRFJPx43Zl5h+mvlQnthxeogzEFCHdNyytYUXf9oLNn1SQCcT9m8yvCLcPR/Di6ffryUK0gneQINcGK7knfpeJzRDFtN38itzaIWBe/aHTzEDMa0IyBx5Y10BuPgsGckHfbnqWCb81z2JEIDyH4mMgoP1KIXLGQ+DEDTVfDoMRaJGRYuWQRJ573oYbkwJV0A2Shcc3lL8abpwtORDBo6DAeJNPwFEXTxruCrnwhVXolYpSbBWSbQKatuxr8lX3s5n9/Z9sm3vELWo1cFobdtp2eSn5AZI3gcSoHXhP0t/Ic0cEbvTwPkzG6FsWxoMXBucXQjiXGNZ7jazT+9Ft5ho+grfevFfnPlVZgHurdntT9QtwNZOXMaphGgNml+HqN/qnnWQXqeuSa5F/wrUSfdgwQYjGMTXO6tlvbkgb6yqflySyc4ZeR/yI1I3ySaO1ieiubelY1TVmBZ/LYElShCogQpeweJ0NNxnUcAEijP7XLH4lDSX7KJFJscyQiqOGraYbrseeoEzEJcyGHhdvbPsWclWoZOjGFmvm4S77KFWvzY0vG50khC+GdBrNc2gjqeOq13CY3LGlXTpmrj6QsslvGIGx+4rFhET5GOmRP0q9nBlBmY87dDUjWL5TGw2Lc6pCqLAsBsJkJDNkn2DzlFOOfrFLWXUvobrRX1hx1h8UH38LNgiOYj7dP33w8tk1+f8p6Lg9xWysnDpJlP/TzsaAcwCvpA/5cCNWAsWIHOtUmXSpX+BMXmz9XufJmtGCVXPQmO8e9TKGcDEYir0lbsLyLv6Wr4ygC5yyCUywstLIxu2BG07bcOTihmzCXBT+zryFDiB0WgUUmT0i+1EgTlGtH1/STyqXgnQqR2DTkfpr1eSD8THg6Ohg0+jsO/wmBaTmSckSGqF+kP4AozOf+ZXL76t+fDaRIpvcdi8HAEYkY76R3D4C8PIWLL07hKWNBiy+QQZNFyuAAs4HM5YHw6ks7JB6ah7oY1fPGQXKFIfJq4AfhwHHuWTOjKsBdZI/JOfLjE50IsNQUKFfVe2Q/p8rvaThO4yVgi73MQzkfWd65CKr3mExJ39dxxWDof8ZoU5rvgHkLAtU3rnI+8O0Q4JdygOMlZYtAwrQ4HKvlt9M0ZnsnBiHn3o0GoNXh0xTrHj7HviIvUnMb8o+UEpbnPrMwnCJ1zw78suKO48SCbJBy+0dGrHmyuvu/EhZzgx67xZ6F9o9qsaNicSmy6Glj6H/kdqkdIr26wxUwh2RHus9eSWVV+m8fDKsorUSrsNMAQScyewubt9fow8NYygCt6p25/dYPZQ2lNDckpb+FqPkD8P5MLmJb8ygxpOao+7Fg0mKyoQMwG6bDTAzqrf6m5m3fEgCNUxPeyzkc1PnujjGdLmcRbwli60XXVFnyAGT1CobSanBrNh3/T04q3/TvWS8MSE9Ab63fAxA2Bsy9849ppgEkb+I/UESXWJ1Gc6gWn5QGZvXtChHJ0osqW3BEhKQHzqdc/T1aNL6L3ni937iuanTG8UvmzNLMyeA1g6RZL4ASu2aPrjGS5W66GRvleZBuZqPuHTXTG7PM59hrf2kmF2LcNmPYkBvKLLkFhiHmGDUYpB2SkPQgSif9WGRehTmzmV+EOsmXFTNcPZdOUBacS+cdMRF+xCQ9o6nfX5DwAeowHxhyxGjPRQ4S0yKZniKzLuQTDdPf+o/feCfyPbjyr+TBnIX98Z0I/t8M7Y1Dqf50PjLoCIQMcOJdFdmYabhwa5yyPfUkxvucJXOsqeeh0uA1rkMJj1Mt3sWuFOSZskhS0W1KW1E1uWfrtKypcNAXTZEf7GvNlFQF6xvHrec6An0EAqgR1qp5KWADmdK5r8O2Gv+v3vvmpWuszjxcLIglM0jZgbSX4lFY3Tr5+Go/Iyz2s0WwGbwznqrJ+wulxwBA14EMcYJ0Mnjn52RX2/UWuBpte5XVXeNr45P+a9UkA96AjbUoIDX6jTxB+QbeGRDyUR+JfSEC56uAM4pni5a1t9S4bJamP1JlOkM/IGz+D0i4/MSFKK5znSdleBhCCkxg9qIyLTkl06qiZvOh8BcP/CQP+EQxv2ojcExH9/hitjubUm6hH6pGVAX+gxKxzGGSr/Vt53TEiC6qvjIBikKNhLtOj1oLrZbxyaYYSXBsXfHhsIkbYP6z55f5uwr9lHZVe5Ef+fPzxGJKotnUgM7OEdyVJVto6AGMD+TgDDJF3yLgiOn3Et+zcyc5IAh4xYZIt6ECh9LM9x/7y2lmwZ27wrT+RC+DV3+LxbUJX0XuvPUoNOrnx+jt8apwVKokQpoux8ZhHvn2wDDzwIE5AYkQu0DI7rhDLMpmf+SRKUbFdf7qrXY/4Nujh2AaefgAvdUV/s73Lgjt56/vit9OQ62pdZ7c9AwnItxqTuX1X6w87tRpJKVe7DmgWz2PBaht3dnfuslZiu5Gj1JnYS+hXcYoHObfcn3Slzqt/OUYacndB6wOTOTdGGOxNkOIAJyvdfe5ozLUJwHfJ147FUhLh+vjEbojziQ+0UAdaXDUSqlKW7efNuOzVHnfENz5LVXrbPHB/RsJmWt8szEiMyYVrMdSqXu+6R06YfNdGuzEzHonDE5NJ8h6KSY1joVypm3R9PNirgBjtqGjRmx2onqW8wU4CBIpwbstnqE95RQLXFJnKNyUCc7cfalg74J/tjFgayDiD3lpP1+enUVsAPb/iaaWokYxPDnB37nVB9rhLMgPw7Xdxw7fhkeJhrBLN3Uuq/Xx62gjPkrQsaPMd9Js5Jng6aBSpAXbyjy8Hf14fW0dWSalD2lDwPeyfoTQLD/GCxC4uQ8WrWX6Q75Zh/KPGEW4q4YyeJ2bxYse7yHQounPdpvdfwSPxLHU2sXMnG67VRY7cpXl3yTEU+cz0mjg0ftNxYPG8dL3elYhWYcdDz5so4sMeGkj2TGaUdzWAz8ElkQynYz78XYwRaRGbVZ77Aowy8t7N9aS/73wjGwnRLLTsOr7zxWO+XxycjWI53GUg0JmbQFdXN4/5DQ5Vpg1O08td4yytj98C5W1T5a3NLiSNMvrOZBuZJZQ76BK5N93vh7W/1kOZLVfGU6GLc0K/jw=="));

	}
}
